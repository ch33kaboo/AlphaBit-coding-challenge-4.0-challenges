Statement:
Generate all permutations of the numbers 1..n in such a way that each
permutation is obtained from the preceding one by an exchange (transposition) of
two adjacent numbers.
Example: n=3, one of the possible answers is
3.2 1 → 2 3.1 → 2.1 3 → 1 2.3 → 1.3 2 → 3 1 2


solution:
program test;
const n = ...;
var
x: array [1..n] of 1..n; {permutation}
inv_x: array [1..n] of 1..n; {inverse permutation}
y: array [1..n] of integer; {y[i] < i}
d: array [1..n] of -1..1; {arrows}
b: Boolean;
procedure print_x;
var i: integer;
begin
for i := 1 to n do begin
write (x[i], ’ ’);
end;
writeln;
end;
procedure set_first; {first: y[i]=0 for all i}
var i : integer;
begin
for i := 1 to n do begin
x[i] := n + 1 - i;
inv_x[i] := n + 1 - i;
y[i] := 0;
d[i] := 1;
end;
end;
procedure move (var done : Boolean);
var i, j, pos1, pos2, val1, val2, tmp : integer;
begin
i := n;
while (i > 1) and (((d[i]=1) and (y[i]=i-1)) or
((d[i]=-1) and (y[i]=0))) do begin
44 2 Generation of combinatorial objects
i := i-1;
end;
done := (i > 1);
{simplification: the first term cannot be changed}
if done then begin
y[i] := y[i] + d[i];
for j := i+1 to n do begin
d[j] := -d[j];
end;
pos1 := inv_x[i];
val1 := i;
pos2 := pos1 + d[i];
val2 := x[pos2];
{pos1, pos2 are positions of elements to be
exchanged; val1, val2 are its values; val2 < val1}
tmp := x[pos1];
x[pos1] := x[pos2];
x[pos2] := tmp;
tmp := inv_x[val1];
inv_x[val1] := inv_x[val2];
inv_x[val2] := tmp;
end;
end;
begin
set_first;
print_x;
b := true;
{all permutations up to the current one (including it)
are printed;
if b is false, the current one is the last one}
while b do begin
move (b);
if b then print_x;
end;
end. 



Input:
n:integer
Output:
print all the permutation
